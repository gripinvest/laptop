# #!/bin/sh
# # shellcheck disable=SC3043

bold=$(tput bold)
normal=$(tput sgr0)

# Load nvm if available
if [ -s "$HOME/.nvm/nvm.sh" ]; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
fi

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

# Determine Homebrew prefix
arch="$(uname -m)"
if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

if ! command -v brew >/dev/null; then
  fancy_echo "------ Installing ${bold}Homebrew${normal} ------"
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/brew shellenv)\""

    export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "------ Uninstalling old Homebrew-Cask ------"
  brew uninstall --force brew-cask
fi

fancy_echo "------ Updating ${bold}Homebrew${normal} formulae ------"
brew update --force # https://github.com/Homebrew/brew/issues/1151

function install_applications {
  csv_file="program_list.csv"

  # Read and process the CSV file
  tail -n +2 "$csv_file" | while IFS="," read -r appname appcommand cask customsearch; do
    # Determine the search command based on customsearch
    search_command=""
    if [ -n "$customsearch" ]; then
      search_command="$customsearch"
    else
      search_command="command -v $appname"
    fi

    # Check if the app is installed
    if ! eval "$search_command" &> /dev/null; then
      fancy_echo "------ Installing ${bold}$appname${normal} ------"
      
      # Install the app using Homebrew
      if [ "$cask" = "true" ]; then
        brew install --cask "$appcommand"
        fancy_echo "------ Installed ${bold}$appname${normal} ------"
      else
        brew install "$appcommand"
        fancy_echo "------ Installed ${bold}$appname${normal} ------"
      fi
    else
      fancy_echo "------ ${bold}$appname${normal} is already installed ------"
    fi
  done
}

function install_node_versions {
  fancy_echo "------ Install ${bold}Node v16.15.1${normal} ------"
  nvm install 16.15.1
  fancy_echo "------ Install ${bold}Node v16.14.0${normal} ------"
  nvm install 16.14.0
  fancy_echo "------ Install ${bold}Node v14.20.0${normal} ------"
  nvm install 14.20.0
  fancy_echo "------ Install ${bold}Yarn${normal} ------"
  sudo npm i -g yarn
}

function add_app_to_dock {
    app="${1}"

    if open -Ra "${app}"; then
        fancy_echo "${bold}$app${normal} added to the Dock"

        defaults write com.apple.dock persistent-apps -array-add "<dict>
                <key>tile-data</key>
                <dict>
                    <key>file-data</key>
                    <dict>
                        <key>_CFURLString</key>
                        <string>${app}</string>
                        <key>_CFURLStringType</key>
                        <integer>0</integer>
                    </dict>
                </dict>
            </dict>"
    else
        fancy_echo "ERROR: Application ${bold}$1${normal} not found."
    fi
}

function update_dock {
  fancy_echo "Do you want to add the installed apps to Dock? (Y/N)"
  read add_to_dock

  if [ "$add_to_dock" = "Y" ]; then
    declare -a dock_apps=(
      '/System/Applications/Utilities/Terminal.app'
      '/Applications/Google Chrome.app'
      '/Applications/Visual Studio Code.app'
      '/Applications/MySQLWorkbench.app'
      '/Applications/OpenVPN Connect.app'
      '/Applications/Postman.app'
      '/Applications/Slack.app'
    );
    fancy_echo "${bold}Adding install applications to Dock${normal}"
    for app in "${dock_apps[@]}"; do
      add_app_to_dock "$app"
    done
    fancy_echo "${bold}Restarting the Dock..${normal}"
    killall Dock
  elif [ "$add_to_dock" = "N" ]; then
    fancy_echo "Ok! Not adding to dock"
  else
    fancy_echo "Invalid input. Skipping the step..."
  fi
}

function open_link_in_chrome {
  link="${1}"
  open -a /Applications/Google\ Chrome.app/ $link
}

function setup_bookmarks {
  fancy_echo "Do you want me to open important links on Google Chrome so that you can add them as bookmark? (Y/N)"
  read add_bookmark

  if [ "$add_bookmark" = "Y" ]; then
    declare -a links=(
      'https://www.gripinvest.in'
      'http://3.109.36.87/'
      'https://app.datadoghq.com/apm/home'
      'https://github.com/gripinvest'
      'https://gripinvest.atlassian.net/jira/software/c/projects/PT/boards/2'
    );
    fancy_echo "${bold}Opening links on Chrome${normal}"
    for link in "${links[@]}"; do
      open_link_in_chrome "$link"
    done
  elif [ "$add_bookmark" = "N" ]; then
    fancy_echo "Laptop onboarding complete. Exiting now..."
  else
    fancy_echo "Invalid input. Skipping the step..."
  fi
}

function setup_git {
  fancy_echo "Do you want to setup github? (Y/N)"
  read setup_github

  if [ "$setup_github" = "Y" ]; then
    fancy_echo "Enter your grip email address"
    read grip_emailid
    fancy_echo "${bold}Setting up github${normal}"
    ssh-keygen -t ed25519 -C "$grip_emailid"
    ssh-add ~/.ssh/id_ed25519
    pub=`cat ~/.ssh/id_ed25519.pub`
    read -p "Enter github username: " githubuser
    fancy_echo "Using username $githubuser"
    fancy_echo "Opening chrome with a github link. Please generate a token with read-write permissions for ${bold}SSH Keys${normal} and then copy and paste the token here..."
    open -a /Applications/Google\ Chrome.app/ https://github.com/settings/tokens
    read -s -p "Enter the token you just generated: " githubpass
    curl -u "$githubuser:$githubpass" -X POST -d "{\"title\":\"`hostname`\",\"key\":\"$pub\"}" https://api.github.com/user/keys

    fancy_echo "What is your role in Grip? (1/2/3)\n1. FullStack Developer\n2. Frontend Developer\n3. Backend Developer\n"
    read role

    declare -a backend_repositories=(
      'git@github.com:gripinvest/gi-sirius.git'
      'git@github.com:gripinvest/grip-client-web.git'
      'git@github.com:gripinvest/grip-client-backend.git'
      'git@github.com:gripinvest/gi-serverless.git'
    );

    declare -a frontend_repositories=(
      'git@github.com:gripinvest/gi-client-web.git'
      'git@github.com:gripinvest/gi-client-static.git'
      'git@github.com:gripinvest/grip-client-web.git'
      'git@github.com:gripinvest/grip-terminal-web.git'
      'git@github.com:gripinvest/gi-ifa-dashboard.git'
      'git@github.com:gripinvest/gi-strapi-cms.git'
      'git@github.com:gripinvest/grip-terminal-forms.git'
      'git@github.com:gripinvest/gi-design-systems.git'
    );

    declare -a fullstack_repositories=(
      'git@github.com:gripinvest/gi-client-web.git'
      'git@github.com:gripinvest/gi-client-static.git'
      'git@github.com:gripinvest/grip-client-web.git'
      'git@github.com:gripinvest/grip-terminal-web.git'
      'git@github.com:gripinvest/gi-ifa-dashboard.git'
      'git@github.com:gripinvest/gi-strapi-cms.git'
      'git@github.com:gripinvest/grip-terminal-forms.git'
      'git@github.com:gripinvest/gi-design-systems.git'
      'git@github.com:gripinvest/gi-sirius.git'
      'git@github.com:gripinvest/grip-client-backend.git'
      'git@github.com:gripinvest/gi-serverless.git'
    );

    if [ "$role" = "1" ]; then
      fancy_echo "Cloning up Grip FullStack Developer repositories..."
      cd ~/Desktop
      mkdir grip-code
      cd grip-code
      for link in "${fullstack_repositories[@]}"; do
        git clone $link
      done
    elif [ "$role" = "2" ]; then
      fancy_echo "Cloning up Grip Frontend Developer repositories..."
      cd ~/Desktop
      mkdir grip-code
      cd grip-code
      for link in "${frontend_repositories[@]}"; do
        git clone $link
      done
    elif [ "$role" = "3" ]; then
      fancy_echo "Cloning up Grip Backend Developer repositories..."
      cd ~/Desktop
      mkdir grip-code
      cd grip-code
      for link in "${backend_repositories[@]}"; do
        git clone $link
      done
    else
      fancy_echo "Invalid role. Exiting now..."
    fi
  fi
}

install_applications
install_node_versions
update_dock
fancy_echo "Laptop setup complete"
setup_git

fancy_echo "Done with the setup. Exiting now..."
sh ./credits.sh